"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Specialist_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Specialist"));
const AvailableInterval_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/AvailableInterval"));
const SessionCreateValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/SessionCreateValidator"));
const Session_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Session"));
const Feedback_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Feedback"));
class StudentsController {
    async getAvailableIntervals() {
        const doctors = await Specialist_1.default.query().preload('availableIntervals').preload('user');
        return { doctors };
    }
    async getDoctorIntervals({ params }) {
        const { id } = params;
        const doctorIntervals = await AvailableInterval_1.default.query().where('specialistId', id);
        return { intervals: doctorIntervals };
    }
    async getNewFeedbacks() {
        const feedbacks = await Feedback_1.default.query().where('seen', false);
        return { feedbacks };
    }
    async getAllFeedbacks() {
        const feedbacks = await Feedback_1.default.query();
        return { feedbacks };
    }
    async getDoctorDetails({ params }) {
        const { id } = params;
        const doctor = await Specialist_1.default.query().where('user_id', id).preload('user').firstOrFail();
        return { doctor };
    }
    async createSession({ request, response }) {
        const { from, to, type, specialistId, studentId } = await request.validate(new SessionCreateValidator_1.default());
        const session = await Session_1.default.create({ from, to, type, specialistId, studentId });
        response.status(201).json({ session });
    }
    async getSessions({ params }) {
        const id = params.id;
        const sessions = await Session_1.default.query().where('student_id', id).preload('specialist', specialistQuery => specialistQuery.preload('user'));
        return { sessions };
    }
}
exports.default = StudentsController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3R1ZGVudHNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU3R1ZGVudHNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsNkZBQStDO0FBQy9DLDJHQUE2RDtBQUM3RCx5SEFBMkU7QUFDM0UsdUZBQXlDO0FBQ3pDLHlGQUEwQztBQUUxQyxNQUFxQixrQkFBa0I7SUFDNUIsS0FBSyxDQUFDLHFCQUFxQjtRQUM5QixNQUFNLE9BQU8sR0FBRyxNQUFNLG9CQUFVLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3RGLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQTtJQUN0QixDQUFDO0lBRU0sS0FBSyxDQUFDLGtCQUFrQixDQUFDLEVBQUUsTUFBTSxFQUF1QjtRQUMzRCxNQUFNLEVBQUUsRUFBRSxFQUFFLEdBQUcsTUFBTSxDQUFBO1FBQ3JCLE1BQU0sZUFBZSxHQUFHLE1BQU0sMkJBQWtCLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQTtRQUNsRixPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxDQUFBO0lBQ3pDLENBQUM7SUFFTSxLQUFLLENBQUMsZUFBZTtRQUN4QixNQUFNLFNBQVMsR0FBRyxNQUFNLGtCQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUM3RCxPQUFPLEVBQUUsU0FBUyxFQUFFLENBQUE7SUFDeEIsQ0FBQztJQUVNLEtBQUssQ0FBQyxlQUFlO1FBQ3hCLE1BQU0sU0FBUyxHQUFHLE1BQU0sa0JBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUN4QyxPQUFPLEVBQUUsU0FBUyxFQUFFLENBQUE7SUFDeEIsQ0FBQztJQUVNLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLE1BQU0sRUFBdUI7UUFDekQsTUFBTSxFQUFFLEVBQUUsRUFBRSxHQUFHLE1BQU0sQ0FBQTtRQUNyQixNQUFNLE1BQU0sR0FBRyxNQUFNLG9CQUFVLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUE7UUFDMUYsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFBO0lBQ3JCLENBQUM7SUFFTSxLQUFLLENBQUMsYUFBYSxDQUFFLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBdUI7UUFDbEUsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsR0FBRyxNQUFNLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxnQ0FBc0IsRUFBRSxDQUFDLENBQUE7UUFDeEcsTUFBTSxPQUFPLEdBQUcsTUFBTSxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFBO1FBQ2pGLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQTtJQUMxQyxDQUFDO0lBRU0sS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFLE1BQU0sRUFBRTtRQUMvQixNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFBO1FBQ3BCLE1BQU0sUUFBUSxHQUFHLE1BQU0saUJBQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsZUFBZSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUE7UUFDeEksT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFBO0lBQ3ZCLENBQUM7Q0FDSjtBQXZDRCxxQ0F1Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcclxuaW1wb3J0IFNwZWNpYWxpc3QgZnJvbSBcIkFwcC9Nb2RlbHMvU3BlY2lhbGlzdFwiO1xyXG5pbXBvcnQgQXZhaWxhYmxlSW50ZXJ2YWxzIGZyb20gXCJBcHAvTW9kZWxzL0F2YWlsYWJsZUludGVydmFsXCJcclxuaW1wb3J0IFNlc3Npb25DcmVhdGVWYWxpZGF0b3IgZnJvbSBcIkFwcC9WYWxpZGF0b3JzL1Nlc3Npb25DcmVhdGVWYWxpZGF0b3JcIjtcclxuaW1wb3J0IFNlc3Npb24gZnJvbSBcIkFwcC9Nb2RlbHMvU2Vzc2lvblwiO1xyXG5pbXBvcnQgRmVlZGJhY2sgZnJvbSBcIkFwcC9Nb2RlbHMvRmVlZGJhY2tcIlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3R1ZGVudHNDb250cm9sbGVyIHtcclxuICAgIHB1YmxpYyBhc3luYyBnZXRBdmFpbGFibGVJbnRlcnZhbHMgKCkge1xyXG4gICAgICAgIGNvbnN0IGRvY3RvcnMgPSBhd2FpdCBTcGVjaWFsaXN0LnF1ZXJ5KCkucHJlbG9hZCgnYXZhaWxhYmxlSW50ZXJ2YWxzJykucHJlbG9hZCgndXNlcicpXHJcbiAgICAgICAgcmV0dXJuIHsgZG9jdG9ycyB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIGdldERvY3RvckludGVydmFscyh7IHBhcmFtcyB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XHJcbiAgICAgICAgY29uc3QgeyBpZCB9ID0gcGFyYW1zXHJcbiAgICAgICAgY29uc3QgZG9jdG9ySW50ZXJ2YWxzID0gYXdhaXQgQXZhaWxhYmxlSW50ZXJ2YWxzLnF1ZXJ5KCkud2hlcmUoJ3NwZWNpYWxpc3RJZCcsIGlkKVxyXG4gICAgICAgIHJldHVybiB7IGludGVydmFsczogZG9jdG9ySW50ZXJ2YWxzIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgZ2V0TmV3RmVlZGJhY2tzKCkge1xyXG4gICAgICAgIGNvbnN0IGZlZWRiYWNrcyA9IGF3YWl0IEZlZWRiYWNrLnF1ZXJ5KCkud2hlcmUoJ3NlZW4nLCBmYWxzZSlcclxuICAgICAgICByZXR1cm4geyBmZWVkYmFja3MgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyBnZXRBbGxGZWVkYmFja3MoKSB7XHJcbiAgICAgICAgY29uc3QgZmVlZGJhY2tzID0gYXdhaXQgRmVlZGJhY2sucXVlcnkoKVxyXG4gICAgICAgIHJldHVybiB7IGZlZWRiYWNrcyB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIGdldERvY3RvckRldGFpbHMoeyBwYXJhbXMgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xyXG4gICAgICAgIGNvbnN0IHsgaWQgfSA9IHBhcmFtc1xyXG4gICAgICAgIGNvbnN0IGRvY3RvciA9IGF3YWl0IFNwZWNpYWxpc3QucXVlcnkoKS53aGVyZSgndXNlcl9pZCcsIGlkKS5wcmVsb2FkKCd1c2VyJykuZmlyc3RPckZhaWwoKVxyXG4gICAgICAgIHJldHVybiB7IGRvY3RvciB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIGNyZWF0ZVNlc3Npb24gKHsgcmVxdWVzdCwgcmVzcG9uc2UgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xyXG4gICAgICAgIGNvbnN0IHsgZnJvbSwgdG8sIHR5cGUsIHNwZWNpYWxpc3RJZCwgc3R1ZGVudElkIH0gPSBhd2FpdCByZXF1ZXN0LnZhbGlkYXRlKG5ldyBTZXNzaW9uQ3JlYXRlVmFsaWRhdG9yKCkpXHJcbiAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IFNlc3Npb24uY3JlYXRlKHsgZnJvbSwgdG8sIHR5cGUsIHNwZWNpYWxpc3RJZCwgc3R1ZGVudElkIH0pXHJcbiAgICAgICAgcmVzcG9uc2Uuc3RhdHVzKDIwMSkuanNvbih7IHNlc3Npb24gfSlcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgZ2V0U2Vzc2lvbnMoeyBwYXJhbXMgfSkge1xyXG4gICAgICAgIGNvbnN0IGlkID0gcGFyYW1zLmlkXHJcbiAgICAgICAgY29uc3Qgc2Vzc2lvbnMgPSBhd2FpdCBTZXNzaW9uLnF1ZXJ5KCkud2hlcmUoJ3N0dWRlbnRfaWQnLCBpZCkucHJlbG9hZCgnc3BlY2lhbGlzdCcsIHNwZWNpYWxpc3RRdWVyeSA9PiBzcGVjaWFsaXN0UXVlcnkucHJlbG9hZCgndXNlcicpKVxyXG4gICAgICAgIHJldHVybiB7IHNlc3Npb25zIH1cclxuICAgIH1cclxufVxyXG4iXX0=