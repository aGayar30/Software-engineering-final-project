"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Route_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Route"));
const Feedback_1 = __importDefault(require("../app/Models/Feedback"));
Route_1.default.get('/', async () => {
    await Feedback_1.default.create({
        session_id: 1,
        content: 'Take the prescribed medicine 3 times'
    });
    await Feedback_1.default.create({
        session_id: 2,
        content: 'It was a pleasure meeting you, do the exercises we mentioned at the session'
    });
    return { project: 'You Matter Backend' };
});
Route_1.default.post('/auth/login', "AuthController.login");
Route_1.default.group(() => {
    Route_1.default.get('/get-intervals', "StudentsController.getAvailableIntervals");
    Route_1.default.get('/get-doctor-intervals/:id', "StudentsController.getDoctorIntervals");
    Route_1.default.post('/create-session', "StudentsController.createSession");
    Route_1.default.get('/get-sessions/:id', "StudentsController.getSessions");
    Route_1.default.get('/get-doctor-details/:id', "StudentsController.getDoctorDetails");
    Route_1.default.get('/new-feedbacks/', "StudentsController.getNewFeedbacks");
})
    .prefix('/student');
Route_1.default.group(() => {
    Route_1.default.post('/add-interval', "SpecialistsController.addAvailableInterval");
    Route_1.default.get('/get-sessions/:id', "SpecialistsController.getSessions");
    Route_1.default.post('/update-session-status', "SpecialistsController.updateSessionStatus");
})
    .prefix('specialist');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicm91dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsb0ZBQTBDO0FBQzFDLHNFQUE4QztBQUU5QyxlQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLElBQUksRUFBRTtJQUN0QixNQUFNLGtCQUFRLENBQUMsTUFBTSxDQUFDO1FBQ2xCLFVBQVUsRUFBRSxDQUFDO1FBQ2IsT0FBTyxFQUFFLHNDQUFzQztLQUNsRCxDQUFDLENBQUE7SUFDRixNQUFNLGtCQUFRLENBQUMsTUFBTSxDQUFDO1FBQ2xCLFVBQVUsRUFBRSxDQUFDO1FBQ2IsT0FBTyxFQUFFLDZFQUE2RTtLQUN6RixDQUFDLENBQUE7SUFDRixPQUFPLEVBQUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLENBQUE7QUFDNUMsQ0FBQyxDQUFDLENBQUE7QUFHRixlQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxzQkFBc0IsQ0FBQyxDQUFBO0FBR2pELGVBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFO0lBQ2IsZUFBSyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSwwQ0FBMEMsQ0FBQyxDQUFBO0lBQ3ZFLGVBQUssQ0FBQyxHQUFHLENBQUMsMkJBQTJCLEVBQUUsdUNBQXVDLENBQUMsQ0FBQTtJQUMvRSxlQUFLLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLGtDQUFrQyxDQUFDLENBQUE7SUFDakUsZUFBSyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxnQ0FBZ0MsQ0FBQyxDQUFBO0lBQ2hFLGVBQUssQ0FBQyxHQUFHLENBQUMseUJBQXlCLEVBQUUscUNBQXFDLENBQUMsQ0FBQTtJQUMzRSxlQUFLLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLG9DQUFvQyxDQUFDLENBQUE7QUFDdEUsQ0FBQyxDQUFDO0tBQ0csTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0FBSXZCLGVBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFO0lBQ2IsZUFBSyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsNENBQTRDLENBQUMsQ0FBQTtJQUN6RSxlQUFLLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLG1DQUFtQyxDQUFDLENBQUE7SUFDbkUsZUFBSyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSwyQ0FBMkMsQ0FBQyxDQUFBO0FBQ3JGLENBQUMsQ0FBQztLQUNHLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRPRE86IGZvcmVpZ24ga2V5cyB2YWxpZGF0aW9uIG9uIHNwZWNpYWxpc3RzIGFuZCBzdHVkZW50c1xyXG5cclxuaW1wb3J0IFJvdXRlIGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvUm91dGUnXHJcbmltcG9ydCBGZWVkYmFjayBmcm9tIFwiLi4vYXBwL01vZGVscy9GZWVkYmFja1wiO1xyXG5cclxuUm91dGUuZ2V0KCcvJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgYXdhaXQgRmVlZGJhY2suY3JlYXRlKHtcclxuICAgICAgICBzZXNzaW9uX2lkOiAxLFxyXG4gICAgICAgIGNvbnRlbnQ6ICdUYWtlIHRoZSBwcmVzY3JpYmVkIG1lZGljaW5lIDMgdGltZXMnXHJcbiAgICB9KVxyXG4gICAgYXdhaXQgRmVlZGJhY2suY3JlYXRlKHtcclxuICAgICAgICBzZXNzaW9uX2lkOiAyLFxyXG4gICAgICAgIGNvbnRlbnQ6ICdJdCB3YXMgYSBwbGVhc3VyZSBtZWV0aW5nIHlvdSwgZG8gdGhlIGV4ZXJjaXNlcyB3ZSBtZW50aW9uZWQgYXQgdGhlIHNlc3Npb24nXHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIHsgcHJvamVjdDogJ1lvdSBNYXR0ZXIgQmFja2VuZCcgfVxyXG59KVxyXG5cclxuLy8gYXV0aCByb3V0ZVxyXG5Sb3V0ZS5wb3N0KCcvYXV0aC9sb2dpbicsIFwiQXV0aENvbnRyb2xsZXIubG9naW5cIilcclxuXHJcbi8vIHN0dWRlbnQgcm91dGVzXHJcblJvdXRlLmdyb3VwKCgpID0+IHtcclxuICAgIFJvdXRlLmdldCgnL2dldC1pbnRlcnZhbHMnLCBcIlN0dWRlbnRzQ29udHJvbGxlci5nZXRBdmFpbGFibGVJbnRlcnZhbHNcIilcclxuICAgIFJvdXRlLmdldCgnL2dldC1kb2N0b3ItaW50ZXJ2YWxzLzppZCcsIFwiU3R1ZGVudHNDb250cm9sbGVyLmdldERvY3RvckludGVydmFsc1wiKVxyXG4gICAgUm91dGUucG9zdCgnL2NyZWF0ZS1zZXNzaW9uJywgXCJTdHVkZW50c0NvbnRyb2xsZXIuY3JlYXRlU2Vzc2lvblwiKVxyXG4gICAgUm91dGUuZ2V0KCcvZ2V0LXNlc3Npb25zLzppZCcsIFwiU3R1ZGVudHNDb250cm9sbGVyLmdldFNlc3Npb25zXCIpXHJcbiAgICBSb3V0ZS5nZXQoJy9nZXQtZG9jdG9yLWRldGFpbHMvOmlkJywgXCJTdHVkZW50c0NvbnRyb2xsZXIuZ2V0RG9jdG9yRGV0YWlsc1wiKVxyXG4gICAgUm91dGUuZ2V0KCcvbmV3LWZlZWRiYWNrcy8nLCBcIlN0dWRlbnRzQ29udHJvbGxlci5nZXROZXdGZWVkYmFja3NcIilcclxufSlcclxuICAgIC5wcmVmaXgoJy9zdHVkZW50JylcclxuXHJcblxyXG4vLyBzcGVjaWFsaXN0IHJvdXRlc1xyXG5Sb3V0ZS5ncm91cCgoKSA9PiB7XHJcbiAgICBSb3V0ZS5wb3N0KCcvYWRkLWludGVydmFsJywgXCJTcGVjaWFsaXN0c0NvbnRyb2xsZXIuYWRkQXZhaWxhYmxlSW50ZXJ2YWxcIilcclxuICAgIFJvdXRlLmdldCgnL2dldC1zZXNzaW9ucy86aWQnLCBcIlNwZWNpYWxpc3RzQ29udHJvbGxlci5nZXRTZXNzaW9uc1wiKVxyXG4gICAgUm91dGUucG9zdCgnL3VwZGF0ZS1zZXNzaW9uLXN0YXR1cycsIFwiU3BlY2lhbGlzdHNDb250cm9sbGVyLnVwZGF0ZVNlc3Npb25TdGF0dXNcIilcclxufSlcclxuICAgIC5wcmVmaXgoJ3NwZWNpYWxpc3QnKVxyXG5cclxuIl19