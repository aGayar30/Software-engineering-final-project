{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from \"axios\";\n\nconst loginRequest = async (id, password) => await axios.post('/auth/login', {\n  id,\n  password\n});\n\nexport const Login = createAsyncThunk('auth/login', async ({\n  id,\n  password\n}, thunkAPI) => {\n  const response = await loginRequest(id, password);\n  return response.data;\n});\nconst emptyAuthState = {\n  token: '',\n  userType: '',\n  profile: {},\n  error: \"\"\n};\nconst localAuth = JSON.parse(localStorage.getItem('auth'));\nlet initialState = {};\n\nif (localAuth) {\n  initialState = localAuth;\n} else {\n  initialState = {\n    token: '',\n    userType: '',\n    profile: {},\n    error: \"\"\n  };\n}\n\nconst AuthSlice = createSlice({\n  name: 'auth',\n  initialState: initialState,\n  reducers: {\n    logout: state => {\n      // state = emptyAuthState\n      state.token = \"\";\n      state.userType = \"\";\n      state.profile = {};\n      state.error = \"\";\n      localStorage.removeItem('auth');\n    },\n    setAuth: (state, {\n      payload\n    }) => {\n      state.token = payload.token;\n      state.userType = payload.userType;\n      state.profile = payload.profile;\n    },\n    setError: (state, {\n      payload\n    }) => {\n      state.error = payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(Login.pending, state => {\n      state.error = \"\";\n      state.userType = \"\";\n      state.profile = {};\n    }).addCase(Login.fulfilled, (state, {\n      payload\n    }) => {\n      state.token = payload.token.token;\n      state.userType = payload.type;\n      state.profile = payload.profile;\n      localStorage.setItem('auth', JSON.stringify(state));\n    }).addCase(Login.rejected, (state, {\n      payload\n    }) => {\n      console.log({\n        payload\n      }); // state.error = payload.errors[0].message\n    });\n  }\n});\nexport default AuthSlice.reducer;\nexport const {\n  logout,\n  setAuth,\n  setError\n} = AuthSlice.actions;","map":{"version":3,"sources":["D:/Psychiatrist Software Project/client/src/redux/AuthSlice/AuthSlice.js"],"names":["createSlice","createAsyncThunk","axios","loginRequest","id","password","post","Login","thunkAPI","response","data","emptyAuthState","token","userType","profile","error","localAuth","JSON","parse","localStorage","getItem","initialState","AuthSlice","name","reducers","logout","state","removeItem","setAuth","payload","setError","extraReducers","builder","addCase","pending","fulfilled","type","setItem","stringify","rejected","console","log","reducer","actions"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport axios from \"axios\";\r\n\r\nconst loginRequest = async (id, password) => await axios.post('/auth/login', { id, password })\r\n\r\nexport const Login = createAsyncThunk('auth/login', async ({id, password}, thunkAPI) => {\r\n    const response = await loginRequest(id, password)\r\n    return response.data\r\n})\r\n\r\nconst emptyAuthState = {\r\n    token: '',\r\n    userType: '',\r\n    profile: {},\r\n    error: \"\",\r\n}\r\n\r\nconst localAuth = JSON.parse(localStorage.getItem('auth'))\r\nlet initialState = {}\r\nif (localAuth) {\r\n    initialState = localAuth\r\n} else {\r\n    initialState = {\r\n        token: '',\r\n        userType: '',\r\n        profile: {},\r\n        error: \"\",\r\n    }\r\n}\r\n\r\nconst AuthSlice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        logout: state => {\r\n            // state = emptyAuthState\r\n            state.token = \"\"\r\n            state.userType = \"\"\r\n            state.profile = {}\r\n            state.error = \"\"\r\n            localStorage.removeItem('auth')\r\n        },\r\n        setAuth: (state, { payload }) => {\r\n            state.token = payload.token\r\n            state.userType = payload.userType\r\n            state.profile = payload.profile\r\n        },\r\n        setError: (state, { payload }) => {\r\n            state.error = payload\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(Login.pending, state => {\r\n                state.error = \"\"\r\n                state.userType = \"\"\r\n                state.profile = {}\r\n            })\r\n            .addCase(Login.fulfilled, (state, { payload }) => {\r\n                state.token = payload.token.token\r\n                state.userType = payload.type\r\n                state.profile = payload.profile\r\n                localStorage.setItem('auth', JSON.stringify(state))\r\n            })\r\n            .addCase(Login.rejected, (state, { payload }) => {\r\n                console.log({ payload })\r\n                // state.error = payload.errors[0].message\r\n            })\r\n    },\r\n})\r\n\r\nexport default AuthSlice.reducer\r\nexport const { logout, setAuth, setError } = AuthSlice.actions\r\n"]},"metadata":{},"sourceType":"module"}