{"ast":null,"code":"var _jsxFileName = \"D:\\\\Psychiatrist Software Project\\\\client\\\\src\\\\pages\\\\StudentPages\\\\WeeklyReminderPage\\\\WeeklyReminderPage.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\nimport Styled from './WeeklyReminderPage.styled';\nimport { useSelector } from 'react-redux';\nimport dayjs from \"dayjs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst minuteSeconds = 60;\nconst hourSeconds = 3600;\nconst daySeconds = 86400;\nconst timerProps = {\n  isPlaying: true,\n  size: 120,\n  strokeWidth: 6\n};\n\nconst renderTime = (dimension, time) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"time-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(Styled.Time, {\n      children: time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: dimension\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n};\n\nconst getTimeSeconds = time => minuteSeconds - time | 0;\n\nconst getTimeMinutes = time => time % hourSeconds / minuteSeconds | 0;\n\nconst getTimeHours = time => time % daySeconds / hourSeconds | 0;\n\nconst getTimeDays = time => time / daySeconds | 0;\n\nexport default function WeeklyReminderPage() {\n  _s();\n\n  const reminderStartDate = useSelector(state => state.auth.profile.student.reminder_start_date);\n  let reminderDate = dayjs(reminderStartDate);\n  const now = dayjs(Date.now()); // get the next reminder date\n\n  while (reminderDate.isBefore(now)) {\n    reminderDate = reminderDate.add(1, 'week');\n    console.log({\n      reminder_is_before_now: reminderDate.isBefore(now),\n      reminderDate: reminderDate.toString(),\n      now: now.toString()\n    });\n  }\n\n  const startTime = now.unix(); // use UNIX timestamp in seconds\n\n  const endTime = reminderDate.unix(); // use UNIX timestamp in seconds\n\n  const remainingTime = endTime - startTime;\n  const days = Math.ceil(remainingTime / daySeconds);\n  const daysDuration = days * daySeconds;\n  return /*#__PURE__*/_jsxDEV(Styled.Container, {\n    children: [/*#__PURE__*/_jsxDEV(CountdownCircleTimer, { ...timerProps,\n      colors: [['#7E2E84']],\n      duration: daysDuration,\n      initialRemainingTime: remainingTime,\n      children: ({\n        elapsedTime\n      }) => renderTime('days', getTimeDays(daysDuration - elapsedTime))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CountdownCircleTimer, { ...timerProps,\n      colors: [['#D14081']],\n      duration: daySeconds,\n      initialRemainingTime: remainingTime % daySeconds,\n      onComplete: totalElapsedTime => [remainingTime - totalElapsedTime > hourSeconds],\n      children: ({\n        elapsedTime\n      }) => renderTime('hours', getTimeHours(daySeconds - elapsedTime))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CountdownCircleTimer, { ...timerProps,\n      colors: [['#EF798A']],\n      duration: hourSeconds,\n      initialRemainingTime: remainingTime % hourSeconds,\n      onComplete: totalElapsedTime => [remainingTime - totalElapsedTime > minuteSeconds],\n      children: ({\n        elapsedTime\n      }) => renderTime('minutes', getTimeMinutes(hourSeconds - elapsedTime))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CountdownCircleTimer, { ...timerProps,\n      colors: [['#218380']],\n      duration: minuteSeconds,\n      initialRemainingTime: remainingTime % minuteSeconds,\n      onComplete: totalElapsedTime => [remainingTime - totalElapsedTime > 0],\n      children: ({\n        elapsedTime\n      }) => renderTime('seconds', getTimeSeconds(elapsedTime))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n\n_s(WeeklyReminderPage, \"4FArZGir/2e90SLHJF4agS1aBMo=\", false, function () {\n  return [useSelector];\n});\n\n_c = WeeklyReminderPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeeklyReminderPage\");","map":{"version":3,"sources":["D:/Psychiatrist Software Project/client/src/pages/StudentPages/WeeklyReminderPage/WeeklyReminderPage.js"],"names":["React","CountdownCircleTimer","Styled","useSelector","dayjs","minuteSeconds","hourSeconds","daySeconds","timerProps","isPlaying","size","strokeWidth","renderTime","dimension","time","getTimeSeconds","getTimeMinutes","getTimeHours","getTimeDays","WeeklyReminderPage","reminderStartDate","state","auth","profile","student","reminder_start_date","reminderDate","now","Date","isBefore","add","console","log","reminder_is_before_now","toString","startTime","unix","endTime","remainingTime","days","Math","ceil","daysDuration","elapsedTime","totalElapsedTime"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\r\nimport Styled from './WeeklyReminderPage.styled'\r\nimport { useSelector } from 'react-redux'\r\nimport dayjs from \"dayjs\";\r\n\r\nconst minuteSeconds = 60\r\nconst hourSeconds = 3600\r\nconst daySeconds = 86400\r\n\r\nconst timerProps = {\r\n    isPlaying: true,\r\n    size: 120,\r\n    strokeWidth: 6,\r\n}\r\n\r\nconst renderTime = (dimension, time) => {\r\n    return (\r\n        <div className=\"time-wrapper\">\r\n            <Styled.Time>{time}</Styled.Time>\r\n            <div>{dimension}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst getTimeSeconds = time => (minuteSeconds - time) | 0\r\nconst getTimeMinutes = time => ((time % hourSeconds) / minuteSeconds) | 0\r\nconst getTimeHours = time => ((time % daySeconds) / hourSeconds) | 0\r\nconst getTimeDays = time => (time / daySeconds) | 0\r\n\r\nexport default function WeeklyReminderPage() {\r\n    const reminderStartDate = useSelector(state => state.auth.profile.student.reminder_start_date)\r\n    let reminderDate = dayjs(reminderStartDate)\r\n    const now = dayjs(Date.now())\r\n\r\n    // get the next reminder date\r\n    while (reminderDate.isBefore(now)) {\r\n        reminderDate = reminderDate.add(1, 'week')\r\n        console.log({ reminder_is_before_now: reminderDate.isBefore(now), reminderDate: reminderDate.toString(), now: now.toString()})\r\n    }\r\n\r\n    const startTime = now.unix() // use UNIX timestamp in seconds\r\n    const endTime = reminderDate.unix() // use UNIX timestamp in seconds\r\n\r\n    const remainingTime = endTime - startTime\r\n    const days = Math.ceil(remainingTime / daySeconds)\r\n    const daysDuration = days * daySeconds\r\n\r\n    return (\r\n        <Styled.Container>\r\n            <CountdownCircleTimer\r\n                {...timerProps}\r\n                colors={[['#7E2E84']]}\r\n                duration={daysDuration}\r\n                initialRemainingTime={remainingTime}\r\n            >\r\n                {({ elapsedTime }) => renderTime('days', getTimeDays(daysDuration - elapsedTime))}\r\n            </CountdownCircleTimer>\r\n            <CountdownCircleTimer\r\n                {...timerProps}\r\n                colors={[['#D14081']]}\r\n                duration={daySeconds}\r\n                initialRemainingTime={remainingTime % daySeconds}\r\n                onComplete={totalElapsedTime => [remainingTime - totalElapsedTime > hourSeconds]}\r\n            >\r\n                {({ elapsedTime }) => renderTime('hours', getTimeHours(daySeconds - elapsedTime))}\r\n            </CountdownCircleTimer>\r\n            <CountdownCircleTimer\r\n                {...timerProps}\r\n                colors={[['#EF798A']]}\r\n                duration={hourSeconds}\r\n                initialRemainingTime={remainingTime % hourSeconds}\r\n                onComplete={totalElapsedTime => [remainingTime - totalElapsedTime > minuteSeconds]}\r\n            >\r\n                {({ elapsedTime }) =>\r\n                    renderTime('minutes', getTimeMinutes(hourSeconds - elapsedTime))\r\n                }\r\n            </CountdownCircleTimer>\r\n            <CountdownCircleTimer\r\n                {...timerProps}\r\n                colors={[['#218380']]}\r\n                duration={minuteSeconds}\r\n                initialRemainingTime={remainingTime % minuteSeconds}\r\n                onComplete={totalElapsedTime => [remainingTime - totalElapsedTime > 0]}\r\n            >\r\n                {({ elapsedTime }) => renderTime('seconds', getTimeSeconds(elapsedTime))}\r\n            </CountdownCircleTimer>\r\n        </Styled.Container>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}